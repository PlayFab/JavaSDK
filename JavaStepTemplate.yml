# STEPS LEVEL TEMPLATE:
# Used to build Java
# Reusable
# Used to "hide" the additional variables specific to this SDK which shouldn't be set from a higher level, or
#   shared from a multi-build pipeline like a publish

parameters:
- name: ApiSpecSource
  displayName: ApiSpecSource
  type: string
  default: -apiSpecGitUrl https://raw.githubusercontent.com/PlayFab/API_Specs/master/
- name: CommitMessage
  displayName: CommitMessage
  type: string
  default: Automated build from ADO Pipeline
- name: GitDestBranch
  displayName: GitDestBranch
  type: string
  default: doNotCommit
- name: SdkName
  displayName: SdkName
  type: string
  default: JavaSDK
- name: GitJSetupBranch
  displayName: GitJSetupBranch
  type: string
  default: master
- name: GitSdkGenBranch
  displayName: GitSdkGenBranch
  type: string
  default: master
- name: isVersioned
  displayName: isVersioned
  type: boolean
  default: false
- name: TestServer
  displayName: TestServer
  default: false
- name: SelfTemplateResource
  displayName: SelfTemplateResource
  type: string
  default: self

steps:
- checkout: JenkinsSdkSetupScripts
  clean: true
  path: s
- checkout: API_Specs
  clean: true
  path: s/API_Specs
- checkout: SdkGenerator
  clean: true
  path: s/SdkGenerator
- checkout: ${{ parameters.SelfTemplateResource }}
  clean: true
  submodules: true
  path: s/sdks/JavaSDK
  persistCredentials: true
- bash: |
    set -e

    echo alias the ADO variables into local variables
    ApiSpecSource="${{ parameters.ApiSpecSource }}"
    CommitMessage="${{ parameters.CommitMessage }}"
    GitDestBranch="${{ parameters.GitDestBranch }}"
    SdkName="${{ parameters.SdkName }}"
    TestServer="${{ parameters.TestServer }}"
    WORKSPACE=$(pwd -W)
    # Hack attempt to get WORKSPACE into a sub-environment
    export WORKSPACE="$WORKSPACE"

    cd "$WORKSPACE/sdks/$SdkName"

    . "$WORKSPACE/JenkinsSdkSetupScripts/JenkinsScripts/Pipeline/testInit.sh"

    echo === Delete previous builds ===
    if [-d "$WORKSPACE/sdks/$SdkName/builds" ]; then
      cd "$WORKSPACE/sdks/$SdkName/builds"
      rm *.jar /F /Q || true
    fi

    cd "$WORKSPACE/SDKGenerator/SDKBuildScripts"
    . ./shared_build.sh

    echo === Build the Java Project ===
    cd "$WORKSPACE/sdks/"$SdkName"/PlayFabSDK"
    export PF_TEST_TITLE_DATA_JSON="$WORKSPACE\JenkinsSdkSetupScripts\Creds\testTitleData.json"
    ./packageMe.sh

    cd "$WORKSPACE/sdks/$SdkName/PlayFabClientSDK"
    ./packageMe.sh

    if [ "$TestServer" = "true" ]; then
      echo === testing server ===
      cd "$WORKSPACE/sdks/$SdkName/PlayFabServerSDK"
      ./deploy.sh
    fi

    if [ "$isVersioned" = "true" ]; then
      echo === publish to maven ===
      cd "$WORKSPACE/sdks/$SdkName/"

      # =========== MANUAL BUILD NOTES ==========
      # This step ALWAYS ALWAYS ALWAYS requires a human on RDP
      # gpg-agent
      # Two options:
      #   gpg-agent[<Process ID>]: gpg-agent running and available
      #   gpg-agent[<Process ID>]: no gpg-agent running in this session
      # If it's already been started under the Jenkins service, it'll hang forever for no reason
      # Run this:
      #   gpgconf --kill gpg-agent
      # Then, restart it manually via RDP
      #   gpg -K
      # If you run it with a cmd prompt, from a keyboard, it will allow the password prompt to appear, when you run these commands:

      pushd "PlayFabClientSDK"
      mvn clean deploy -e -X -P release && mvn nexus-staging:release
      popd

      pushd "PlayFabSDK"
      mvn clean deploy -e -X -P release && mvn nexus-staging:release
      popd

      pushd "PlayFabServerSDK"
      mvn clean deploy -e -X -P release && mvn nexus-staging:release
      popd
    fi
  displayName: 'Build/Test/Report'
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '*.xml'
    testRunTitle: JavaTemplate
